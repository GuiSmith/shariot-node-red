[
    {
        "id": "d825e256770b54a7",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "mqtt_broker_local",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e990a15958d6ede9",
        "type": "mqtt-broker",
        "name": "Temperatura Server",
        "broker": "demo.thingsboard.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e584059a44b71cf4",
        "type": "mqtt-broker",
        "name": "Presença Server",
        "broker": "demo.thingsboard.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e5471d30ca503827",
        "type": "mqtt-broker",
        "name": "Distância Server",
        "broker": "demo.thingsboard.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_sensor_ir",
        "type": "mqtt in",
        "z": "d825e256770b54a7",
        "name": "Sensor Presença",
        "topic": "sensor/ir",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "mqtt_broker_local",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "parse_payload"
            ]
        ]
    },
    {
        "id": "parse_payload",
        "type": "function",
        "z": "d825e256770b54a7",
        "name": "Processa presença",
        "func": "let presenca = msg.payload.presenca;\n\n// Converte para boolean (1 -> true, 0 ou outro -> false)\nlet presencaBool = (presenca == 1);\n\n// Recupera último valor do contexto (persistente no nó)\nlet ultimoValor = context.get('ultimoPresenca') || false;\n\nnode.warn(presencaBool === ultimoValor);\nnode.warn(presenca);\n\n// Se o valor não mudou, não envia nada (retorna null para bloquear)\nif (presencaBool === ultimoValor) {\n  return null;\n}\n\nnode.warn(`Mudança de presença: ${presencaBool}`);\n\n// Atualiza o contexto com o valor novo\ncontext.set('ultimoPresenca', presencaBool);\n\n// Envia a mensagem com o payload formatado em JSON\nmsg.payload = JSON.stringify({\n  presenca: presencaBool\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "98efc15330fd5707"
            ]
        ]
    },
    {
        "id": "0afcc2e6a894855f",
        "type": "function",
        "z": "d825e256770b54a7",
        "name": "Processa Distância",
        "func": "let distancia = parseFloat(msg.payload.distancia);\n\n// Ajusta para ter 2 casas decimais, tipo metros com 2 decimais (ex: 1.23)\ndistancia = Math.round(distancia * 100) / 100;\n\n// Cria o payload formatado\nmsg.payload = JSON.stringify({\n  distancia: distancia\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "daaa6a2a0bf36eb4"
            ]
        ]
    },
    {
        "id": "b1aea22d3a466803",
        "type": "function",
        "z": "d825e256770b54a7",
        "name": "Processa temperatura",
        "func": "let temperatura = msg.payload.temperatura;\n\n// Arredonda para 1 casa decimal\ntemperatura = Math.round(temperatura * 10) / 10;\n\n// Recupera última temperatura do contexto\nlet ultimaTemperatura = context.get(\"ultimaTemperatura\") || null;\n\n// Verifica se a diferença é significativa (>= 3°C)\nif (ultimaTemperatura === null || Math.abs(temperatura - ultimaTemperatura) >= 3) {\n  // Atualiza a temperatura no contexto\n  context.set(\"ultimaTemperatura\", temperatura);\n\n  // Define o estado baseado na temperatura\n  let estado = \"\";\n  if (temperatura <= 9) {\n    estado = \"Frio\";\n  } else if (temperatura <= 20) {\n    estado = \"Fresco\";\n  } else if (temperatura <= 30) {\n    estado = \"Aconchegante\";\n  } else {\n    estado = \"Calor\";\n  }\n\n  // if(estado == 'Calor'){\n  //   node.warn(Calor! Temperatura atual: ${temperatura}°C | Última enviada: ${ultimaTemperatura});\n  // }\n\n  // Envia payload\n  msg.payload = JSON.stringify({\n    temperatura: temperatura,\n    estado: estado\n  });\n\n  return msg;\n}\n\n// Não envia, mas debug já foi mostrado\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "e44a28d8a3bdd38e"
            ]
        ]
    },
    {
        "id": "e44a28d8a3bdd38e",
        "type": "mqtt out",
        "z": "d825e256770b54a7",
        "name": "Requisição Temperatura ThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e990a15958d6ede9",
        "x": 710,
        "y": 220,
        "wires": []
    },
    {
        "id": "98efc15330fd5707",
        "type": "mqtt out",
        "z": "d825e256770b54a7",
        "name": "Requisição Presença ThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e584059a44b71cf4",
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "daaa6a2a0bf36eb4",
        "type": "mqtt out",
        "z": "d825e256770b54a7",
        "name": "ThingsBoard Distância Server",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e5471d30ca503827",
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "713cb71c72e724b8",
        "type": "mqtt in",
        "z": "d825e256770b54a7",
        "name": "Sensor Temperatura",
        "topic": "sensor/temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "mqtt_broker_local",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 220,
        "wires": [
            [
                "b1aea22d3a466803"
            ]
        ]
    },
    {
        "id": "5f8868a8b2bc1f74",
        "type": "mqtt in",
        "z": "d825e256770b54a7",
        "name": "Sensor Distância",
        "topic": "sensor/distancia",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "mqtt_broker_local",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 340,
        "wires": [
            [
                "0afcc2e6a894855f"
            ]
        ]
    }
]
